# Generic Particle template generated by dtpr-package on {date}.
# Author:
#     [Your Name]
# Version:
#     0.0
#
# This class is a template for a generic particle class. It is used to create a particle object with 
# various attributes. It should contain 'to_dict' and '__str__' methods since they are used in the 
# dtpr.base.Event class. If you want to make this class able to be built on the fly when an instance
# of Event is created, your __init__ method should be able to handle a root event entry as an input 
# argument called "ev".


from dtpr.utils.functions import color_msg

class {name}(object):
    # Define the attributes of the class in the __slots__ list to save memory
    __slots__ = ["index"] # add more attributes here

    def __init__(self, index, ev=None):
        """
        Initialize a {name} instance.

        description here...

        :param index: The index of the particle.
        :type index: int
        :param ev: The root event entry containing event data.
        .
        . (add more parameters here if needed)
        .
        """
        self.index = index
        if ev is not None: # constructor with root event entry info
            # Extract the need attributes from the root event entry
            # and assign them to the corresponding attributes of the instance
            pass
        else: # constructor with explicit info
            # Initialize the attributes of the instance with the input arguments
            pass


    def to_dict(self):
        """
        Convert the {name} instance to a dictionary.

        :return: A dictionary representation of the {name} instance.
        :rtype: dict
        """
        return {attr: getattr(self, attr) for attr in self.__slots__}

    def __str__(self, indentLevel=0):
        """
        Generate a string representation of the {name} instance.

        :param indentLevel: The indentation level for the summary.
        :type indentLevel: int
        :return: The shower summary.
        :rtype: str
        """
        summary = [
            color_msg(
                f"------ {name} {self.index} info ------",
                color="yellow",
                indentLevel=indentLevel,
                return_str=True,
            )
        ]

        summary.append(
            color_msg(
                ", ".join(
                    [
                        f"{attr.capitalize()}: {getattr(self, attr)}"
                        for attr in self.__slots__
                        if attr != "index"
                    ]
                ),
                indentLevel=indentLevel + 1,
                return_str=True,
            )
        )
        return "\n".join(summary)


if __name__ == '__main__':
    # Test the class here
    particle_instance = {name}(1)

    print(particle_instance)
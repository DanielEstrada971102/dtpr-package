# Generic NTuple template generated by dtpr-package on {date}
# 
# Author:
#     [Your Name]
# Version:
#     0.1
#
# This class is a template for a generic NTuple class. It is used to create an NTuple object with 
# various attributes. It inherits from the NTuple class (dtpr.base.ntuple) and contains a 'run' method 
# for processing Event instances. The __init__ method calls super().__init__ to initialize the base class.

from dtpr.base import Event, EventList, import NTuple

class {name}(NTuple):
    def __init__(self, inputFolder, selectors, maxfiles=-1):
        """
        Initialize a {name} instance.

        :param inputFolder: The folder containing the input files.
        :type inputFolder: str
        :param selectors: A list of selector functions to apply to the events. See dtpr.utils.filters
        :type selectors: list
        :param maxfiles: The maximum number of files to process. Defaults to -1 (process all files).
        :type maxfiles: int, optional
        """
        super().__init__(inputFolder, selectors, maxfiles) # add tree_name argument if needed, default is "/TTREE"

    def event_preprocessor(self, ev: Event):
        """
        Preprocess the event. Specific to {name}.

        :param ev: The event to preprocess.
        :type ev: Event
        :returns: The preprocessed event if it passes the selection criteria, otherwise None.
        :rtype: Event
        """
        # Implement specific analysis here before apply global selection
        # ...

        # Apply global selection
        if not self.select_event(ev):
            pass
        else:
            return ev


if __name__ == '__main__':
    import os
    # Test the class here
    def example_selector(event):
        # Example selector function that always returns True
        return True

    input_folder = "Input/folder/path" # <------- Add the path to the input folder
    selectors = [example_selector]
    max_files = 5

    {name}_instance = {name}(input_folder, selectors, maxfiles=max_files)
    # you can access events by index such as a list
    print({name}_instance.events[10])

    # or loop over the events
    for iev, ev in enumerate({name}_instance.events):
        print(ev)
        if iev == 2: break

    # or simply use the root tree, which is a ROOT.TChain
    for i, ev in enumerate({name}_instance.tree):
        print(ev.event_orbitNumber)
        if i == 0: break

